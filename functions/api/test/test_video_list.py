# coding: utf-8
"""
    YouTube Data API v3

    See. [YouTube Data API v3](https://developers.google.com/youtube/v3)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
import datetime
import unittest

from youtube_data_v3.models.video_list import VideoList


class TestVideoList(unittest.TestCase):
    """VideoList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VideoList:
        """Test VideoList
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `VideoList`
        """
        model = VideoList()
        if include_optional:
            return VideoList(
                kind = '',
                etag = '',
                next_page_token = '',
                prev_page_token = '',
                page_info = youtube_data_v3.models.page_info.PageInfo(
                    total_results = 56,
                    results_per_page = 56, ),
                items = [
                    youtube_data_v3.models.video.Video(
                        kind = '',
                        etag = '',
                        id = '',
                        snippet = youtube_data_v3.models.snippet.Snippet(
                            published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                            channel_id = '',
                            title = '',
                            description = '',
                            thumbnails = {
                                'key' : youtube_data_v3.models.thumbnail.Thumbnail(
                                    url = '',
                                    width = 56,
                                    height = 56, )
                                },
                            channel_title = '',
                            tags = [
                                ''
                                ],
                            category_id = '',
                            live_broadcast_content = 'live',
                            default_language = '',
                            localized = youtube_data_v3.models.localized.Localized(
                                title = '',
                                description = '', ),
                            default_audio_language = '', ),
                        content_details = youtube_data_v3.models.content_details.ContentDetails(
                            duration = '',
                            dimension = '',
                            definition = 'hd',
                            caption = 'false',
                            licensed_content = True,
                            region_restriction = youtube_data_v3.models.content_details_region_restriction.ContentDetails_regionRestriction(
                                allowed = [
                                    ''
                                    ],
                                blocked = [
                                    ''
                                    ], ),
                            content_rating = youtube_data_v3.models.content_rating.ContentRating(
                                acb_rating = '',
                                agcom_rating = '',
                                anatel_rating = '',
                                bbfc_rating = '',
                                bfvc_rating = '',
                                bmukk_rating = '',
                                catv_rating = '',
                                catvfr_rating = '',
                                cbfc_rating = '',
                                ccc_rating = '',
                                cce_rating = '',
                                chfilm_rating = '',
                                chvrs_rating = '',
                                cicf_rating = '',
                                cna_rating = '',
                                cnc_rating = '',
                                csa_rating = '',
                                cscf_rating = '',
                                czfilm_rating = '',
                                djctq_rating = '',
                                djctq_rating_reasons = [
                                    ''
                                    ],
                                ecbmct_rating = '',
                                eefilm_rating = '',
                                egfilm_rating = '',
                                eirin_rating = '',
                                fcbm_rating = '',
                                fco_rating = '',
                                fmoc_rating = '',
                                fpb_rating = '',
                                fpb_rating_reasons = [
                                    ''
                                    ],
                                fsk_rating = '',
                                grfilm_rating = '',
                                icaa_rating = '',
                                ifco_rating = '',
                                ilfilm_rating = '',
                                incaa_rating = '',
                                kfcb_rating = '',
                                kijkwijzer_rating = '',
                                kmrb_rating = '',
                                lsf_rating = '',
                                mccaa_rating = '',
                                mccyp_rating = '',
                                mcst_rating = '',
                                mda_rating = '',
                                medietilsynet_rating = '',
                                meku_rating = '',
                                mibac_rating = '',
                                moc_rating = '',
                                moctw_rating = '',
                                mpaa_rating = '',
                                mpaat_rating = '',
                                mtrcb_rating = '',
                                nbc_rating = '',
                                nbcpl_rating = '',
                                nfrc_rating = '',
                                nfvcb_rating = '',
                                nkclv_rating = '',
                                oflc_rating = '',
                                pefilm_rating = '',
                                rcnof_rating = '',
                                resorteviolencia_rating = '',
                                rtc_rating = '',
                                rte_rating = '',
                                russia_rating = '',
                                skfilm_rating = '',
                                smais_rating = '',
                                smsa_rating = '',
                                tvpg_rating = '',
                                yt_rating = '', ),
                            projection = '',
                            has_custom_thumbnail = True, ),
                        status = youtube_data_v3.models.status.Status(
                            upload_status = 'deleted',
                            failure_reason = 'codec',
                            rejection_reason = 'claim',
                            privacy_status = 'private',
                            publish_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                            license = 'creativeCommon',
                            embeddable = True,
                            public_stats_viewable = True,
                            made_for_kids = True,
                            self_declared_made_for_kids = True, ),
                        statistics = youtube_data_v3.models.statistics.Statistics(
                            view_count = 56,
                            like_count = 56,
                            dislike_count = 56,
                            favorite_count = 56,
                            comment_count = 56, ),
                        player = youtube_data_v3.models.player.Player(
                            embed_html = '',
                            embed_height = 56,
                            embed_width = 56, ),
                        topic_details = youtube_data_v3.models.topic_details.TopicDetails(
                            topic_ids = [
                                ''
                                ],
                            relevant_topic_ids = [
                                ''
                                ],
                            topic_categories = [
                                ''
                                ], ),
                        recording_details = youtube_data_v3.models.recording_details.RecordingDetails(
                            recording_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                        file_details = youtube_data_v3.models.file_details.FileDetails(
                            file_name = '',
                            file_size = 56,
                            file_type = 'video',
                            container = '',
                            video_streams = [
                                youtube_data_v3.models.file_details_video_streams_inner.FileDetails_videoStreams_inner(
                                    width_pixels = 56,
                                    height_pixels = 56,
                                    frame_rate_fps = 1.337,
                                    aspect_ratio = 1.337,
                                    codec = '',
                                    bitrate_bps = 56,
                                    rotation = 'none',
                                    vendor = '', )
                                ],
                            audio_streams = [
                                youtube_data_v3.models.file_details_audio_streams_inner.FileDetails_audioStreams_inner(
                                    channel_count = 56,
                                    codec = '',
                                    bitrate_bps = 56,
                                    vendor = '', )
                                ],
                            duration_ms = 56,
                            bitrate_bps = 56,
                            creation_time = '', ),
                        processing_details = youtube_data_v3.models.processing_details.ProcessingDetails(
                            processing_status = 'succeeded',
                            processing_progress = youtube_data_v3.models.processing_details_processing_progress.ProcessingDetails_processingProgress(
                                parts_total = 56,
                                parts_processed = 56,
                                time_left_ms = 56, ),
                            processing_failure_reason = '',
                            file_details_availability = '',
                            processing_issues_availability = '',
                            tag_suggestions_availability = '',
                            editor_suggestions_availability = '',
                            thumbnails_availability = '', ),
                        suggestions = youtube_data_v3.models.suggestions.Suggestions(
                            processing_errors = [
                                'archiveFile'
                                ],
                            processing_warnings = [
                                'hasEditlist'
                                ],
                            processing_hints = [
                                'nonStreamableMov'
                                ],
                            tag_suggestions = [
                                youtube_data_v3.models.suggestions_tag_suggestions_inner.Suggestions_tagSuggestions_inner(
                                    tag = '',
                                    category_restricts = [
                                        ''
                                        ], )
                                ],
                            editor_suggestions = [
                                'audioQuietAudioSwap'
                                ], ),
                        live_streaming_details = youtube_data_v3.models.live_streaming_details.LiveStreamingDetails(
                            actual_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                            actual_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                            scheduled_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                            scheduled_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                            concurrent_viewers = 56,
                            active_live_chat_id = '', ),
                        localizations = {
                            'key' : {
                                'key' : youtube_data_v3.models.localization_value.Localization_value(
                                    title = '',
                                    description = '', )
                                }
                            }, )
                    ]
            )
        else:
            return VideoList(
        )
        """

    def testVideoList(self):
        """Test VideoList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
