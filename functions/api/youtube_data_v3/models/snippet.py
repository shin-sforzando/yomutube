# coding: utf-8
"""
    YouTube Data API v3

    See. [YouTube Data API v3](https://developers.google.com/youtube/v3)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any
from typing import ClassVar
from typing import Dict
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import Field
from pydantic import field_validator
from pydantic import StrictStr
from youtube_data_v3.models.localized import Localized

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Snippet(BaseModel):
    """
    The snippet object contains basic details about the video, such as its title, description, and category.
    """  # noqa: E501

    published_at: Optional[datetime] = Field(
        default=None,
        description="The date and time that the video was published. Note that this time might be different than the time that the video was uploaded. For example, if a video is uploaded as a private video and then made public at a later time, this property will specify the time that the video was made public. There are a couple of special cases: - If a video is uploaded as a private video and the video metadata is retrieved by the channel owner, then the property value specifies the date and time that the video was uploaded. - If a video is uploaded as an unlisted video, the property value also specifies the date and time that the video was uploaded. In this case, anyone who knows the video's unique video ID can retrieve the video metadata. The value is specified in ISO 8601 format.",
        alias="publishedAt",
    )
    channel_id: Optional[StrictStr] = Field(
        default=None,
        description="The ID that YouTube uses to uniquely identify the channel that the video was uploaded to.",
        alias="channelId",
    )
    title: Optional[StrictStr] = Field(
        default=None,
        description="The video's title. The property value has a maximum length of 100 characters and may contain all valid UTF-8 characters except < and >. You must set a value for this property if you call the videos.update method and are updating the snippet part of a video resource.",
    )
    description: Optional[StrictStr] = Field(
        default=None,
        description="The video's description. The property value has a maximum length of 5000 bytes and may contain all valid UTF-8 characters except < and >.",
    )
    thumbnails: Optional[Any] = None
    channel_title: Optional[StrictStr] = Field(
        default=None,
        description="The title of the channel that the video belongs to.",
        alias="channelTitle",
    )
    tags: Optional[List[StrictStr]] = None
    category_id: Optional[StrictStr] = Field(
        default=None,
        description="The YouTube video category associated with the video. You must set a value for this property if you call the `videos.update` method and are updating the snippet part of a video resource.",
        alias="categoryId",
    )
    live_broadcast_content: Optional[StrictStr] = Field(
        default=None,
        description='Indicates if the video is an upcoming/active live broadcast. Or it\'s "none" if the video is not an upcoming/active live broadcast. Valid values for this property are: - `live` - `none` - `upcoming`',
        alias="liveBroadcastContent",
    )
    default_language: Optional[StrictStr] = Field(
        default=None,
        description="The language of the text in the video resource's `snippet.title` and `snippet.description` properties.",
        alias="defaultLanguage",
    )
    localized: Optional[Localized] = None
    default_audio_language: Optional[StrictStr] = Field(
        default=None,
        description="The `default_audio_language` property specifies the language spoken in the video's default audio track.",
        alias="defaultAudioLanguage",
    )
    __properties: ClassVar[List[str]] = [
        "publishedAt",
        "channelId",
        "title",
        "description",
        "thumbnails",
        "channelTitle",
        "tags",
        "categoryId",
        "liveBroadcastContent",
        "defaultLanguage",
        "localized",
        "defaultAudioLanguage",
    ]

    @field_validator("live_broadcast_content")
    def live_broadcast_content_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("live", "none", "upcoming"):
            raise ValueError("must be one of enum values ('live', 'none', 'upcoming')")
        return value

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Snippet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of localized
        if self.localized:
            _dict["localized"] = self.localized.to_dict()
        # set to None if thumbnails (nullable) is None
        # and model_fields_set contains the field
        if self.thumbnails is None and "thumbnails" in self.model_fields_set:
            _dict["thumbnails"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Snippet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "publishedAt": obj.get("publishedAt"),
                "channelId": obj.get("channelId"),
                "title": obj.get("title"),
                "description": obj.get("description"),
                "channelTitle": obj.get("channelTitle"),
                "tags": obj.get("tags"),
                "categoryId": obj.get("categoryId"),
                "liveBroadcastContent": obj.get("liveBroadcastContent"),
                "defaultLanguage": obj.get("defaultLanguage"),
                "localized": Localized.from_dict(obj.get("localized"))
                if obj.get("localized") is not None
                else None,
                "defaultAudioLanguage": obj.get("defaultAudioLanguage"),
            }
        )
        return _obj
