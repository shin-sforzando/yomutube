# coding: utf-8
"""
    YouTube Data API v3

    See. [YouTube Data API v3](https://developers.google.com/youtube/v3)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import ClassVar
from typing import Dict
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import Field
from pydantic import field_validator
from pydantic import StrictStr
from youtube_data_v3.models.processing_details_processing_progress import (
    ProcessingDetailsProcessingProgress,
)

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class ProcessingDetails(BaseModel):
    """
    The processingDetails object encapsulates information about YouTube's progress in processing the uploaded video file. The properties in the object identify the current processing status and an estimate of the time remaining until YouTube finishes processing the video. This part also indicates whether different types of data or content, such as file details or thumbnail images, are available for the video. The processingProgress object is designed to be polled so that the video uploaded can track the progress that YouTube has made in processing the uploaded video file. This data can only be retrieved by the video owner.
    """  # noqa: E501

    processing_status: Optional[StrictStr] = Field(
        default=None,
        description="The video's processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed. Valid values for this property are: - `succeeded` - Video has been successfully processed. - `failed` - Video processing has failed. See ProcessingFailureReason. - `processing` - Video is currently being processed. See ProcessingProgress. - `terminated` - Processing information is no longer available.",
        alias="processingStatus",
    )
    processing_progress: Optional[ProcessingDetailsProcessingProgress] = Field(
        default=None, alias="processingProgress"
    )
    processing_failure_reason: Optional[StrictStr] = Field(
        default=None,
        description="The reason that YouTube failed to process the video. This property will only have a value if the `processingStatus` property's value is `failed`. Valid values for this property are: - `other` - Some other processing component has failed. - `streamingFailed` - Video could not be sent to streamers. - `transcodeFailed` - Content transcoding has failed. - `uploadFailed` - File delivery has failed.",
        alias="processingFailureReason",
    )
    file_details_availability: Optional[StrictStr] = Field(
        default=None,
        description="This value indicates whether file details are available for the uploaded video. You can retrieve a video's file details by requesting the `fileDetails` part in your `videos.list()` request.",
        alias="fileDetailsAvailability",
    )
    processing_issues_availability: Optional[StrictStr] = Field(
        default=None,
        description="This value indicates whether the video processing engine has generated suggestions that might improve YouTube's ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems. You can retrieve these suggestions by requesting the `suggestions` part in your `videos.list()` request.",
        alias="processingIssuesAvailability",
    )
    tag_suggestions_availability: Optional[StrictStr] = Field(
        default=None,
        description="This value indicates whether keyword (tag) suggestions are available for the video. Tags can be added to a video's metadata to make it easier for other users to find the video. You can retrieve these suggestions by requesting the `suggestions` part in your `videos.list()` request.",
        alias="tagSuggestionsAvailability",
    )
    editor_suggestions_availability: Optional[StrictStr] = Field(
        default=None,
        description="This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video. You can retrieve these suggestions by requesting the `suggestions` part in your `videos.list()` request.",
        alias="editorSuggestionsAvailability",
    )
    thumbnails_availability: Optional[StrictStr] = Field(
        default=None,
        description="This value indicates whether thumbnail images have been generated for the video.",
        alias="thumbnailsAvailability",
    )
    __properties: ClassVar[List[str]] = [
        "processingStatus",
        "processingProgress",
        "processingFailureReason",
        "fileDetailsAvailability",
        "processingIssuesAvailability",
        "tagSuggestionsAvailability",
        "editorSuggestionsAvailability",
        "thumbnailsAvailability",
    ]

    @field_validator("processing_status")
    def processing_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("succeeded", "failed", "processing", "terminated"):
            raise ValueError(
                "must be one of enum values ('succeeded', 'failed', 'processing', 'terminated')"
            )
        return value

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProcessingDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of processing_progress
        if self.processing_progress:
            _dict["processingProgress"] = self.processing_progress.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProcessingDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "processingStatus": obj.get("processingStatus"),
                "processingProgress": ProcessingDetailsProcessingProgress.from_dict(
                    obj.get("processingProgress")
                )
                if obj.get("processingProgress") is not None
                else None,
                "processingFailureReason": obj.get("processingFailureReason"),
                "fileDetailsAvailability": obj.get("fileDetailsAvailability"),
                "processingIssuesAvailability": obj.get("processingIssuesAvailability"),
                "tagSuggestionsAvailability": obj.get("tagSuggestionsAvailability"),
                "editorSuggestionsAvailability": obj.get(
                    "editorSuggestionsAvailability"
                ),
                "thumbnailsAvailability": obj.get("thumbnailsAvailability"),
            }
        )
        return _obj
