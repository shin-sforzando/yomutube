# coding: utf-8
"""
    YouTube Data API v3

    See. [YouTube Data API v3](https://developers.google.com/youtube/v3)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import ClassVar
from typing import Dict
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import Field
from pydantic import field_validator
from pydantic import StrictInt
from pydantic import StrictStr
from youtube_data_v3.models.file_details_audio_streams_inner import (
    FileDetailsAudioStreamsInner,
)
from youtube_data_v3.models.file_details_video_streams_inner import (
    FileDetailsVideoStreamsInner,
)

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class FileDetails(BaseModel):
    """
    The fileDetails object encapsulates information about the video file that was uploaded to YouTube, including the file's resolution, duration, audio and video codecs, stream bitrates, and more. This data can only be retrieved by the video owner. The fileDetails object will only be returned if the `processingDetails.fileAvailability` property has a value of available.
    """  # noqa: E501

    file_name: Optional[StrictStr] = Field(
        default=None, description="The name of the file.", alias="fileName"
    )
    file_size: Optional[StrictInt] = Field(
        default=None, description="The size of the file in bytes.", alias="fileSize"
    )
    file_type: Optional[StrictStr] = Field(
        default=None,
        description="The uploaded file's type as detected by YouTube's video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded. Valid values for this property are: - `video` - The file is a known video file type, such as an .mp4 file. - `archive` - The file is an archive file, such as a .zip archive. - `audio` - The file is a known audio file type, such as an .mp3 file. - `document` - The file is a document or text file, such as a MS Word document. - `image` - The file is an image file, such as a .jpeg image. - `other` - The file is another non-video file type. - `project` - The file is a video project file, such as a Microsoft Windows Movie Maker project, that does not contain actual video data.",
        alias="fileType",
    )
    container: Optional[StrictStr] = Field(
        default=None, description="The uploaded video file's container format."
    )
    video_streams: Optional[List[FileDetailsVideoStreamsInner]] = Field(
        default=None, alias="videoStreams"
    )
    audio_streams: Optional[List[FileDetailsAudioStreamsInner]] = Field(
        default=None, alias="audioStreams"
    )
    duration_ms: Optional[StrictInt] = Field(
        default=None,
        description="The length of the uploaded video in milliseconds.",
        alias="durationMs",
    )
    bitrate_bps: Optional[StrictInt] = Field(
        default=None,
        description="The uploaded video file's combined (video and audio) bitrate in bits per second.",
        alias="bitrateBps",
    )
    creation_time: Optional[StrictStr] = Field(
        default=None,
        description="The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported: - Date only: `YYYY-MM-DD` - Naive time: `YYYY-MM-DDTHH:MM:SS` - Time with timezone: `YYYY-MM-DDTHH:MM:SS+HH:MM`",
        alias="creationTime",
    )
    __properties: ClassVar[List[str]] = [
        "fileName",
        "fileSize",
        "fileType",
        "container",
        "videoStreams",
        "audioStreams",
        "durationMs",
        "bitrateBps",
        "creationTime",
    ]

    @field_validator("file_type")
    def file_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "video",
            "archive",
            "audio",
            "document",
            "image",
            "other",
            "project",
        ):
            raise ValueError(
                "must be one of enum values ('video', 'archive', 'audio', 'document', 'image', 'other', 'project')"
            )
        return value

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FileDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in video_streams (list)
        _items = []
        if self.video_streams:
            for _item in self.video_streams:
                if _item:
                    _items.append(_item.to_dict())
            _dict["videoStreams"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in audio_streams (list)
        _items = []
        if self.audio_streams:
            for _item in self.audio_streams:
                if _item:
                    _items.append(_item.to_dict())
            _dict["audioStreams"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FileDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "fileName": obj.get("fileName"),
                "fileSize": obj.get("fileSize"),
                "fileType": obj.get("fileType"),
                "container": obj.get("container"),
                "videoStreams": [
                    FileDetailsVideoStreamsInner.from_dict(_item)
                    for _item in obj.get("videoStreams")
                ]
                if obj.get("videoStreams") is not None
                else None,
                "audioStreams": [
                    FileDetailsAudioStreamsInner.from_dict(_item)
                    for _item in obj.get("audioStreams")
                ]
                if obj.get("audioStreams") is not None
                else None,
                "durationMs": obj.get("durationMs"),
                "bitrateBps": obj.get("bitrateBps"),
                "creationTime": obj.get("creationTime"),
            }
        )
        return _obj
