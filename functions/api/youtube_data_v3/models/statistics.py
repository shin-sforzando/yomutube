# coding: utf-8
"""
    YouTube Data API v3

    See. [YouTube Data API v3](https://developers.google.com/youtube/v3)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import ClassVar
from typing import Dict
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import Field
from pydantic import StrictInt

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Statistics(BaseModel):
    """
    The statistics object contains statistics about the video.
    """  # noqa: E501

    view_count: Optional[StrictInt] = Field(
        default=None, description="The view count of the video.", alias="viewCount"
    )
    like_count: Optional[StrictInt] = Field(
        default=None, description="The like count of the video.", alias="likeCount"
    )
    dislike_count: Optional[StrictInt] = Field(
        default=None,
        description="The dislike count of the video. The `statistics.dislikeCount` property was made private as of December 13, 2021. This means that the property is included in an API response only if the API request was authenticated by the video owner. See the [revision history](https://developers.google.com/youtube/v3/revision_history#release_notes_12_15_2021) for more information.",
        alias="dislikeCount",
    )
    favorite_count: Optional[StrictInt] = Field(
        default=None,
        description="The favorite count of the video. This property has been deprecated. The deprecation is effective as of August 28, 2015. The property's value is now always set to `0`.",
        alias="favoriteCount",
    )
    comment_count: Optional[StrictInt] = Field(
        default=None,
        description="The comment count of the video.",
        alias="commentCount",
    )
    __properties: ClassVar[List[str]] = [
        "viewCount",
        "likeCount",
        "dislikeCount",
        "favoriteCount",
        "commentCount",
    ]

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Statistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Statistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "viewCount": obj.get("viewCount"),
                "likeCount": obj.get("likeCount"),
                "dislikeCount": obj.get("dislikeCount"),
                "favoriteCount": obj.get("favoriteCount"),
                "commentCount": obj.get("commentCount"),
            }
        )
        return _obj
