# coding: utf-8
"""
    YouTube Data API v3

    See. [YouTube Data API v3](https://developers.google.com/youtube/v3)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any
from typing import ClassVar
from typing import Dict
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import Field
from pydantic import field_validator
from pydantic import StrictBool
from pydantic import StrictStr

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Status(BaseModel):
    """
    The status object contains information about the video's uploading, processing, and privacy statuses.
    """  # noqa: E501

    upload_status: Optional[StrictStr] = Field(
        default=None,
        description="The status of the uploaded video.",
        alias="uploadStatus",
    )
    failure_reason: Optional[StrictStr] = Field(
        default=None,
        description="This value explains why a video failed to upload. This property is only present if the `uploadStatus` property indicates that the upload failed.",
        alias="failureReason",
    )
    rejection_reason: Optional[StrictStr] = Field(
        default=None,
        description="This value explains why YouTube rejected an uploaded video. This property is only present if the `uploadStatus` property indicates that the upload was rejected.",
        alias="rejectionReason",
    )
    privacy_status: Optional[StrictStr] = Field(
        default=None, description="The video's privacy status.", alias="privacyStatus"
    )
    publish_at: Optional[datetime] = Field(
        default=None,
        description="The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private. The value is specified in ISO 8601 format. Note the following two additional points about this property's behavior: - If you set this property's value when calling the videos.update method, you must also set the status.privacyStatus property value to private even if the video is already private. - If your request schedules a video to be published at some time in the past, the video will be published right away. As such, the effect of setting the status.publishAt property to a past date and time is the same as of changing the video's privacyStatus from private to public.",
        alias="publishAt",
    )
    license: Optional[StrictStr] = Field(
        default=None, description="The license of the video."
    )
    embeddable: Optional[StrictBool] = Field(
        default=None,
        description="This value indicates whether the video can be embedded on another website.",
    )
    public_stats_viewable: Optional[StrictBool] = Field(
        default=None,
        description="This value indicates whether the extended video statistics on the video's watch page are publicly viewable. By default, those statistics are viewable, and statistics like a video's `viewCount` and ratings will still be publicly visible even if this property's value is set to `false`.",
        alias="publicStatsViewable",
    )
    made_for_kids: Optional[StrictBool] = Field(
        default=None,
        description='This value indicates whether the video is designated as child-directed, and it contains the current "made for kids" status of the video. For example, the status might be determined based on the value of the `selfDeclaredMadeForKids` property.',
        alias="madeForKids",
    )
    self_declared_made_for_kids: Optional[StrictBool] = Field(
        default=None,
        description="In a `videos.insert` or `videos.update` request, this property allows the channel owner to designate the video as being child-directed. In a `videos.list` request, the property value is only returned if the channel owner authorized the API request.",
        alias="selfDeclaredMadeForKids",
    )
    __properties: ClassVar[List[str]] = [
        "uploadStatus",
        "failureReason",
        "rejectionReason",
        "privacyStatus",
        "publishAt",
        "license",
        "embeddable",
        "publicStatsViewable",
        "madeForKids",
        "selfDeclaredMadeForKids",
    ]

    @field_validator("upload_status")
    def upload_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("deleted", "failed", "processed", "rejected", "uploaded"):
            raise ValueError(
                "must be one of enum values ('deleted', 'failed', 'processed', 'rejected', 'uploaded')"
            )
        return value

    @field_validator("failure_reason")
    def failure_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "codec",
            "conversion",
            "emptyFile",
            "invalidFile",
            "tooSmall",
            "uploadAborted",
        ):
            raise ValueError(
                "must be one of enum values ('codec', 'conversion', 'emptyFile', 'invalidFile', 'tooSmall', 'uploadAborted')"
            )
        return value

    @field_validator("rejection_reason")
    def rejection_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "claim",
            "copyright",
            "duplicate",
            "inappropriate",
            "legal",
            "length",
            "termsOfUse",
            "trademark",
            "uploaderAccountClosed",
            "uploaderAccountSuspended",
        ):
            raise ValueError(
                "must be one of enum values ('claim', 'copyright', 'duplicate', 'inappropriate', 'legal', 'length', 'termsOfUse', 'trademark', 'uploaderAccountClosed', 'uploaderAccountSuspended')"
            )
        return value

    @field_validator("privacy_status")
    def privacy_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("private", "public", "unlisted"):
            raise ValueError(
                "must be one of enum values ('private', 'public', 'unlisted')"
            )
        return value

    @field_validator("license")
    def license_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("creativeCommon", "youtube"):
            raise ValueError("must be one of enum values ('creativeCommon', 'youtube')")
        return value

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Status from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Status from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "uploadStatus": obj.get("uploadStatus"),
                "failureReason": obj.get("failureReason"),
                "rejectionReason": obj.get("rejectionReason"),
                "privacyStatus": obj.get("privacyStatus"),
                "publishAt": obj.get("publishAt"),
                "license": obj.get("license"),
                "embeddable": obj.get("embeddable"),
                "publicStatsViewable": obj.get("publicStatsViewable"),
                "madeForKids": obj.get("madeForKids"),
                "selfDeclaredMadeForKids": obj.get("selfDeclaredMadeForKids"),
            }
        )
        return _obj
