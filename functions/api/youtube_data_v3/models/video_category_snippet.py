# coding: utf-8
"""
    YouTube Data API v3

    See. [YouTube Data API v3](https://developers.google.com/youtube/v3)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import ClassVar
from typing import Dict
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import Field
from pydantic import StrictBool
from pydantic import StrictStr

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class VideoCategorySnippet(BaseModel):
    """
    VideoCategorySnippet
    """  # noqa: E501

    channel_id: Optional[StrictStr] = Field(
        default=None,
        description="The YouTube channel that created the video category.",
        alias="channelId",
    )
    title: Optional[StrictStr] = Field(
        default=None, description="The video category's title."
    )
    assignable: Optional[StrictBool] = Field(
        default=None,
        description="Indicates whether videos can be associated with the category. If you set this value to `false`, then YouTube does not display the category in video metadata that it returns for searches.",
    )
    __properties: ClassVar[List[str]] = ["channelId", "title", "assignable"]

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VideoCategorySnippet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VideoCategorySnippet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "channelId": obj.get("channelId"),
                "title": obj.get("title"),
                "assignable": obj.get("assignable"),
            }
        )
        return _obj
