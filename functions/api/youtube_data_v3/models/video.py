# coding: utf-8
"""
    YouTube Data API v3

    See. [YouTube Data API v3](https://developers.google.com/youtube/v3)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import ClassVar
from typing import Dict
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import Field
from pydantic import StrictStr
from youtube_data_v3.models.content_details import ContentDetails
from youtube_data_v3.models.file_details import FileDetails
from youtube_data_v3.models.live_streaming_details import LiveStreamingDetails
from youtube_data_v3.models.player import Player
from youtube_data_v3.models.processing_details import ProcessingDetails
from youtube_data_v3.models.recording_details import RecordingDetails
from youtube_data_v3.models.snippet import Snippet
from youtube_data_v3.models.statistics import Statistics
from youtube_data_v3.models.status import Status
from youtube_data_v3.models.suggestions import Suggestions
from youtube_data_v3.models.topic_details import TopicDetails

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Video(BaseModel):
    """
    A video resource represents a YouTube video. See. [Videos](https://developers.google.com/youtube/v3/docs/videos#resource)
    """  # noqa: E501

    kind: Optional[StrictStr] = Field(
        default=None,
        description="Identifies the API resource's type. The value will be `youtube#video`.",
    )
    etag: Optional[StrictStr] = Field(
        default=None, description="The Etag of this resource."
    )
    id: Optional[StrictStr] = Field(
        default=None,
        description="The ID that YouTube uses to uniquely identify the video.",
    )
    snippet: Optional[Snippet] = None
    content_details: Optional[ContentDetails] = Field(
        default=None, alias="contentDetails"
    )
    status: Optional[Status] = None
    statistics: Optional[Statistics] = None
    player: Optional[Player] = None
    topic_details: Optional[TopicDetails] = Field(default=None, alias="topicDetails")
    recording_details: Optional[RecordingDetails] = Field(
        default=None, alias="recordingDetails"
    )
    file_details: Optional[FileDetails] = Field(default=None, alias="fileDetails")
    processing_details: Optional[ProcessingDetails] = Field(
        default=None, alias="processingDetails"
    )
    suggestions: Optional[Suggestions] = None
    live_streaming_details: Optional[LiveStreamingDetails] = Field(
        default=None, alias="liveStreamingDetails"
    )
    localizations: Optional[Any] = None
    __properties: ClassVar[List[str]] = [
        "kind",
        "etag",
        "id",
        "snippet",
        "contentDetails",
        "status",
        "statistics",
        "player",
        "topicDetails",
        "recordingDetails",
        "fileDetails",
        "processingDetails",
        "suggestions",
        "liveStreamingDetails",
        "localizations",
    ]

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Video from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of snippet
        if self.snippet:
            _dict["snippet"] = self.snippet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_details
        if self.content_details:
            _dict["contentDetails"] = self.content_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict["status"] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict["statistics"] = self.statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of player
        if self.player:
            _dict["player"] = self.player.to_dict()
        # override the default output from pydantic by calling `to_dict()` of topic_details
        if self.topic_details:
            _dict["topicDetails"] = self.topic_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recording_details
        if self.recording_details:
            _dict["recordingDetails"] = self.recording_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_details
        if self.file_details:
            _dict["fileDetails"] = self.file_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of processing_details
        if self.processing_details:
            _dict["processingDetails"] = self.processing_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggestions
        if self.suggestions:
            _dict["suggestions"] = self.suggestions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of live_streaming_details
        if self.live_streaming_details:
            _dict["liveStreamingDetails"] = self.live_streaming_details.to_dict()
        # set to None if localizations (nullable) is None
        # and model_fields_set contains the field
        if self.localizations is None and "localizations" in self.model_fields_set:
            _dict["localizations"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Video from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "kind": obj.get("kind"),
                "etag": obj.get("etag"),
                "id": obj.get("id"),
                "snippet": Snippet.from_dict(obj.get("snippet"))
                if obj.get("snippet") is not None
                else None,
                "contentDetails": ContentDetails.from_dict(obj.get("contentDetails"))
                if obj.get("contentDetails") is not None
                else None,
                "status": Status.from_dict(obj.get("status"))
                if obj.get("status") is not None
                else None,
                "statistics": Statistics.from_dict(obj.get("statistics"))
                if obj.get("statistics") is not None
                else None,
                "player": Player.from_dict(obj.get("player"))
                if obj.get("player") is not None
                else None,
                "topicDetails": TopicDetails.from_dict(obj.get("topicDetails"))
                if obj.get("topicDetails") is not None
                else None,
                "recordingDetails": RecordingDetails.from_dict(
                    obj.get("recordingDetails")
                )
                if obj.get("recordingDetails") is not None
                else None,
                "fileDetails": FileDetails.from_dict(obj.get("fileDetails"))
                if obj.get("fileDetails") is not None
                else None,
                "processingDetails": ProcessingDetails.from_dict(
                    obj.get("processingDetails")
                )
                if obj.get("processingDetails") is not None
                else None,
                "suggestions": Suggestions.from_dict(obj.get("suggestions"))
                if obj.get("suggestions") is not None
                else None,
                "liveStreamingDetails": LiveStreamingDetails.from_dict(
                    obj.get("liveStreamingDetails")
                )
                if obj.get("liveStreamingDetails") is not None
                else None,
            }
        )
        return _obj
