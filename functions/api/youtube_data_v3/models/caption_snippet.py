# coding: utf-8
"""
    YouTube Data API v3

    See. [YouTube Data API v3](https://developers.google.com/youtube/v3)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any
from typing import ClassVar
from typing import Dict
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import Field
from pydantic import field_validator
from pydantic import StrictBool
from pydantic import StrictStr

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class CaptionSnippet(BaseModel):
    """
    The snippet object contains basic details about the caption.
    """  # noqa: E501

    video_id: Optional[StrictStr] = Field(
        default=None,
        description="The ID that YouTube uses to uniquely identify the video associated with the caption track.",
        alias="videoId",
    )
    last_updated: Optional[datetime] = Field(
        default=None,
        description="The date and time when the caption track was last updated. The value is specified in ISO 8601 format.",
        alias="lastUpdated",
    )
    track_kind: Optional[StrictStr] = Field(
        default=None,
        description="The caption track's type. Valid values for this property are   - `standard` - A regular caption track. This is the default value.   - `ASR` - A caption track generated using automatic speech recognition.   - `forced` - A caption track that plays when no other track is selected in the player. For example, a video that shows aliens speaking in an alien language might have a forced caption track to only show subtitles for the alien language.",
        alias="trackKind",
    )
    language: Optional[StrictStr] = Field(
        default=None,
        description="The language of the caption track. The property value is a BCP-47 language tag.",
    )
    name: Optional[StrictStr] = Field(
        default=None,
        description="The name of the caption track. The name is intended to be visible to the user as an option during playback.",
    )
    audio_track_type: Optional[StrictStr] = Field(
        default=None,
        description="The type of audio track associated with the caption track. Valid values for this property are - `unknown` - This is the default value. - `commentary` - The caption track corresponds to an alternate audio track that includes commentary, such as directory commentary. - `descriptive` - The caption track corresponds to an alternate audio track that includes additional descriptive audio. - `primary` - The caption track corresponds to the primary audio track for the video, which is the audio track normally associated with the video.",
        alias="audioTrackType",
    )
    is_cc: Optional[StrictBool] = Field(
        default=None,
        description="Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is `false`.",
        alias="isCC",
    )
    is_large: Optional[StrictBool] = Field(
        default=None,
        description="Indicates whether the caption track uses large text for the vision-impaired. The default value is `false`.",
        alias="isLarge",
    )
    is_easy_reader: Optional[StrictBool] = Field(
        default=None,
        description='Indicates whether caption track is formatted for "easy reader," meaning it is at a third-grade level for language learners. The default value is `false`.',
        alias="isEasyReader",
    )
    is_draft: Optional[StrictBool] = Field(
        default=None,
        description="Indicates whether the caption track is a draft. If the value is `true`, then the track is not publicly visible. The default value is `false`.",
        alias="isDraft",
    )
    is_auto_synced: Optional[StrictBool] = Field(
        default=None,
        description="Indicates whether YouTube synchronized the caption track to the audio track in the video. The value will be `true` if a sync was explicitly requested when the caption track was uploaded. For example, when calling the `captions.insert` or `captions.update` methods, you can set the sync parameter to `true` to instruct YouTube to sync the uploaded track to the video. If the value is `false`, YouTube uses the time codes in the uploaded caption track to determine when to display captions.",
        alias="isAutoSynced",
    )
    status: Optional[StrictStr] = Field(
        default=None,
        description="The caption track's status. Valid values for this property are - `failed` - `serving` - `syncing`",
    )
    failure_reason: Optional[StrictStr] = Field(
        default=None,
        description="The reason that YouTube failed to process the caption track. This property is only present if the state property's value is failed. Valid values for this property are - `processingFailed` - YouTube failed to process the uploaded caption track. - `unknownFormat` - The caption track's format was not recognized. - `unsupportedFormat` - The caption track's format is not supported.",
        alias="failureReason",
    )
    __properties: ClassVar[List[str]] = [
        "videoId",
        "lastUpdated",
        "trackKind",
        "language",
        "name",
        "audioTrackType",
        "isCC",
        "isLarge",
        "isEasyReader",
        "isDraft",
        "isAutoSynced",
        "status",
        "failureReason",
    ]

    @field_validator("track_kind")
    def track_kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("standard", "ASR", "forced"):
            raise ValueError("must be one of enum values ('standard', 'ASR', 'forced')")
        return value

    @field_validator("audio_track_type")
    def audio_track_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("unknown", "commentary", "descriptive", "primary"):
            raise ValueError(
                "must be one of enum values ('unknown', 'commentary', 'descriptive', 'primary')"
            )
        return value

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("failed", "serving", "syncing"):
            raise ValueError(
                "must be one of enum values ('failed', 'serving', 'syncing')"
            )
        return value

    @field_validator("failure_reason")
    def failure_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("processingFailed", "unknownFormat", "unsupportedFormat"):
            raise ValueError(
                "must be one of enum values ('processingFailed', 'unknownFormat', 'unsupportedFormat')"
            )
        return value

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CaptionSnippet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CaptionSnippet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "videoId": obj.get("videoId"),
                "lastUpdated": obj.get("lastUpdated"),
                "trackKind": obj.get("trackKind"),
                "language": obj.get("language"),
                "name": obj.get("name"),
                "audioTrackType": obj.get("audioTrackType"),
                "isCC": obj.get("isCC"),
                "isLarge": obj.get("isLarge"),
                "isEasyReader": obj.get("isEasyReader"),
                "isDraft": obj.get("isDraft"),
                "isAutoSynced": obj.get("isAutoSynced"),
                "status": obj.get("status"),
                "failureReason": obj.get("failureReason"),
            }
        )
        return _obj
