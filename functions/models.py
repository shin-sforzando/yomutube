# generated by datamodel-codegen:
#   filename:  YouTubeDataV3.yaml
#   timestamp: 2023-12-08T11:44:38+00:00
from __future__ import annotations

from enum import Enum
from typing import Dict
from typing import List
from typing import Optional

from pydantic import AnyUrl
from pydantic import AwareDatetime
from pydantic import BaseModel
from pydantic import ConfigDict
from pydantic import Field
from pydantic import RootModel


class VideoCategorySnippet(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    channelId: Optional[str] = Field(
        None, description="The YouTube channel that created the video category."
    )
    title: Optional[str] = Field(None, description="The video category's title.")
    assignable: Optional[bool] = Field(
        None,
        description="Indicates whether videos can be associated with the category.\nIf you set this value to `false`, then YouTube does not display the category in video metadata that it returns for searches.",
    )


class PageInfo(BaseModel):
    """
    The pageInfo object encapsulates paging information for the result set.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    totalResults: Optional[int] = Field(
        None, description="The total number of results in the result set."
    )
    resultsPerPage: Optional[int] = Field(
        None, description="The number of results included in the API response."
    )


class LiveBroadcastContent(Enum):
    """
    Indicates if the video is an upcoming/active live broadcast. Or it's "none" if the video is not an upcoming/active live broadcast.
    Valid values for this property are:
    - `live`
    - `none`
    - `upcoming`
    """

    live = "live"
    none = "none"
    upcoming = "upcoming"


class Thumbnail(BaseModel):
    """
    A map of thumbnail images associated with the video.
    For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    url: Optional[AnyUrl] = Field(None, description="The URL of the thumbnail image.")
    width: Optional[int] = Field(
        None, description="The width of the thumbnail image in pixels."
    )
    height: Optional[int] = Field(
        None, description="The height of the thumbnail image in pixels."
    )


class Localized(BaseModel):
    """
    The `snippet.localized` object contains either a localized title and description for the video or the title in the default language for the video's metadata.
    - Localized text is returned in the resource snippet if the `videos.list` request used the hl parameter to specify a language for which localized text should be returned and localized text is available in that language.
    - Metadata for the default language is returned if an hl parameter value is not specified or a value is specified but localized metadata is not available for the specified language.
    The property contains a read-only value. Use the `localizations` object to add, update, or delete localized titles.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    title: Optional[str] = Field(None, description="The localized video title.")
    description: Optional[str] = Field(
        None, description="The localized video description."
    )


class Definition(Enum):
    """
    Indicates whether the video is available in high definition (HD) or only in standard definition.
    Valid values for this property are:
    - `hd`
    - `sd`
    """

    hd = "hd"
    sd = "sd"


class Caption(Enum):
    """
    Indicates whether captions are available for the video.
    Valid values for this property are:
    - `false`
    - `true`
    """

    False_ = False
    True_ = True


class RegionRestriction(BaseModel):
    """
    The `regionRestriction` object contains information about the countries where a video is (or is not) viewable.
    The object will contain either the `contentDetails.regionRestriction.allowed` property or the `contentDetails.regionRestriction.blocked` property.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    allowed: Optional[List[str]] = Field(
        None,
        description="A list of region codes that identify countries where the video is viewable.\nIf this property is present and a country is not listed in its value, then the video is blocked from appearing in that country.\nIf this property is present and contains an empty list, the video is blocked in all countries.",
    )
    blocked: Optional[List[str]] = Field(
        None,
        description="A list of region codes that identify countries where the video is blocked.\nIf this property is present and a country is not listed in its value, then the video is viewable in that country.\nIf this property is present and contains an empty list, the video is viewable in all countries.",
    )


class ContentRating(BaseModel):
    """
    Specifies the ratings that the video received under various rating schemes.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    acbRating: Optional[str] = Field(None, description="The ACB rating of the content.")
    agcomRating: Optional[str] = Field(
        None, description="The AGCOM rating of the content."
    )
    anatelRating: Optional[str] = Field(
        None, description="The Anatel rating of the content."
    )
    bbfcRating: Optional[str] = Field(
        None, description="The BBFC rating of the content."
    )
    bfvcRating: Optional[str] = Field(
        None, description="The BFVC rating of the content."
    )
    bmukkRating: Optional[str] = Field(
        None, description="The BMUKK rating of the content."
    )
    catvRating: Optional[str] = Field(
        None, description="The CATV rating of the content."
    )
    catvfrRating: Optional[str] = Field(
        None, description="The CATVFR rating of the content."
    )
    cbfcRating: Optional[str] = Field(
        None, description="The CBFC rating of the content."
    )
    cccRating: Optional[str] = Field(None, description="The CCC rating of the content.")
    cceRating: Optional[str] = Field(None, description="The CCE rating of the content.")
    chfilmRating: Optional[str] = Field(
        None, description="The CHFilm rating of the content."
    )
    chvrsRating: Optional[str] = Field(
        None, description="The CHVRS rating of the content."
    )
    cicfRating: Optional[str] = Field(
        None, description="The CICF rating of the content."
    )
    cnaRating: Optional[str] = Field(None, description="The CNA rating of the content.")
    cncRating: Optional[str] = Field(None, description="The CNC rating of the content.")
    csaRating: Optional[str] = Field(None, description="The CSA rating of the content.")
    cscfRating: Optional[str] = Field(
        None, description="The CSCF rating of the content."
    )
    czfilmRating: Optional[str] = Field(
        None, description="The CZFilm rating of the content."
    )
    djctqRating: Optional[str] = Field(
        None, description="The DJCTQ rating of the content."
    )
    djctqRatingReasons: Optional[List[str]] = Field(
        None, description="The DJCTQ rating reasons of the content."
    )
    ecbmctRating: Optional[str] = Field(
        None, description="The ECBMCT rating of the content."
    )
    eefilmRating: Optional[str] = Field(
        None, description="The EEFilm rating of the content."
    )
    egfilmRating: Optional[str] = Field(
        None, description="The EGFilm rating of the content."
    )
    eirinRating: Optional[str] = Field(
        None, description="The EIRIN rating of the content."
    )
    fcbmRating: Optional[str] = Field(
        None, description="The FCBM rating of the content."
    )
    fcoRating: Optional[str] = Field(None, description="The FCO rating of the content.")
    fmocRating: Optional[str] = Field(
        None,
        description="The FMOC rating of the content.\nThis property has been deprecated as of November 2, 2015. Use the `contentDetails.contentRating.cncRating` property instead.",
    )
    fpbRating: Optional[str] = Field(None, description="The FPB rating of the content.")
    fpbRatingReasons: Optional[List[str]] = Field(
        None, description="The FPB rating reasons of the content."
    )
    fskRating: Optional[str] = Field(None, description="The FSK rating of the content.")
    grfilmRating: Optional[str] = Field(
        None, description="The GRFilm rating of the content."
    )
    icaaRating: Optional[str] = Field(
        None, description="The ICAA rating of the content."
    )
    ifcoRating: Optional[str] = Field(
        None, description="The IFCo rating of the content."
    )
    ilfilmRating: Optional[str] = Field(
        None, description="The ILFilm rating of the content."
    )
    incaaRating: Optional[str] = Field(
        None, description="The INCAA rating of the content."
    )
    kfcbRating: Optional[str] = Field(
        None, description="The KFCB rating of the content."
    )
    kijkwijzerRating: Optional[str] = Field(
        None, description="The Kijkwijzer rating of the content."
    )
    kmrbRating: Optional[str] = Field(
        None, description="The KMRB rating of the content."
    )
    lsfRating: Optional[str] = Field(None, description="The LSF rating of the content.")
    mccaaRating: Optional[str] = Field(
        None, description="The MCCAA rating of the content."
    )
    mccypRating: Optional[str] = Field(
        None, description="The MCCYP rating of the content."
    )
    mcstRating: Optional[str] = Field(
        None, description="The MCST rating of the content."
    )
    mdaRating: Optional[str] = Field(None, description="The MDA rating of the content.")
    medietilsynetRating: Optional[str] = Field(
        None, description="The Medietilsynet rating of the content."
    )
    mekuRating: Optional[str] = Field(
        None, description="The MEKU rating of the content."
    )
    mibacRating: Optional[str] = Field(
        None, description="The MIBAC rating of the content."
    )
    mocRating: Optional[str] = Field(None, description="The MOC rating of the content.")
    moctwRating: Optional[str] = Field(
        None, description="The MOCTW rating of the content."
    )
    mpaaRating: Optional[str] = Field(
        None, description="The MPAA rating of the content."
    )
    mpaatRating: Optional[str] = Field(
        None, description="The MPAAT rating of the content."
    )
    mtrcbRating: Optional[str] = Field(
        None, description="The MTRCB rating of the content."
    )
    nbcRating: Optional[str] = Field(None, description="The NBC rating of the content.")
    nbcplRating: Optional[str] = Field(
        None, description="The NBCPL rating of the content."
    )
    nfrcRating: Optional[str] = Field(
        None, description="The NFRC rating of the content."
    )
    nfvcbRating: Optional[str] = Field(
        None, description="The NFVCB rating of the content."
    )
    nkclvRating: Optional[str] = Field(
        None, description="The NKCLV rating of the content."
    )
    oflcRating: Optional[str] = Field(
        None, description="The OFLC rating of the content."
    )
    pefilmRating: Optional[str] = Field(
        None, description="The PEFilm rating of the content."
    )
    rcnofRating: Optional[str] = Field(
        None, description="The RCNOF rating of the content."
    )
    resorteviolenciaRating: Optional[str] = Field(
        None, description="The RESORTEVIOLÊNCIA rating of the content."
    )
    rtcRating: Optional[str] = Field(None, description="The RTC rating of the content.")
    rteRating: Optional[str] = Field(None, description="The RTE rating of the content.")
    russiaRating: Optional[str] = Field(
        None, description="The Russia rating of the content."
    )
    skfilmRating: Optional[str] = Field(
        None, description="The SKFilm rating of the content."
    )
    smaisRating: Optional[str] = Field(
        None, description="The SMAIS rating of the content."
    )
    smsaRating: Optional[str] = Field(
        None, description="The SMSA rating of the content."
    )
    tvpgRating: Optional[str] = Field(
        None, description="The TVPG rating of the content."
    )
    ytRating: Optional[str] = Field(None, description="The YT rating of the content.")


class UploadStatus(Enum):
    """
    The status of the uploaded video.
    """

    deleted = "deleted"
    failed = "failed"
    processed = "processed"
    rejected = "rejected"
    uploaded = "uploaded"


class FailureReason(Enum):
    """
    This value explains why a video failed to upload. This property is only present if the `uploadStatus` property indicates that the upload failed.
    """

    codec = "codec"
    conversion = "conversion"
    emptyFile = "emptyFile"
    invalidFile = "invalidFile"
    tooSmall = "tooSmall"
    uploadAborted = "uploadAborted"


class RejectionReason(Enum):
    """
    This value explains why YouTube rejected an uploaded video. This property is only present if the `uploadStatus` property indicates that the upload was rejected.
    """

    claim = "claim"
    copyright = "copyright"
    duplicate = "duplicate"
    inappropriate = "inappropriate"
    legal = "legal"
    length = "length"
    termsOfUse = "termsOfUse"
    trademark = "trademark"
    uploaderAccountClosed = "uploaderAccountClosed"
    uploaderAccountSuspended = "uploaderAccountSuspended"


class PrivacyStatus(Enum):
    """
    The video's privacy status.
    """

    private = "private"
    public = "public"
    unlisted = "unlisted"


class License(Enum):
    """
    The license of the video.
    """

    creativeCommon = "creativeCommon"
    youtube = "youtube"


class Status(BaseModel):
    """
    The status object contains information about the video's uploading, processing, and privacy statuses.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    uploadStatus: Optional[UploadStatus] = Field(
        None,
        description="The status of the uploaded video.",
        examples=["deleted", "failed", "processed", "rejected", "uploaded"],
    )
    failureReason: Optional[FailureReason] = Field(
        None,
        description="This value explains why a video failed to upload. This property is only present if the `uploadStatus` property indicates that the upload failed.",
        examples=[
            "codec",
            "conversion",
            "emptyFile",
            "invalidFile",
            "tooSmall",
            "uploadAborted",
        ],
    )
    rejectionReason: Optional[RejectionReason] = Field(
        None,
        description="This value explains why YouTube rejected an uploaded video. This property is only present if the `uploadStatus` property indicates that the upload was rejected.",
    )
    privacyStatus: Optional[PrivacyStatus] = Field(
        None,
        description="The video's privacy status.",
        examples=["private", "public", "unlisted"],
    )
    publishAt: Optional[AwareDatetime] = Field(
        None,
        description="The date and time when the video is scheduled to publish.\nIt can be set only if the privacy status of the video is private.\nThe value is specified in ISO 8601 format.\nNote the following two additional points about this property's behavior:\n- If you set this property's value when calling the videos.update method, you must also set the status.privacyStatus property value to private even if the video is already private.\n- If your request schedules a video to be published at some time in the past, the video will be published right away. As such, the effect of setting the status.publishAt property to a past date and time is the same as of changing the video's privacyStatus from private to public.",
    )
    license: Optional[License] = Field(
        None,
        description="The license of the video.",
        examples=["creativeCommon", "youtube"],
    )
    embeddable: Optional[bool] = Field(
        None,
        description="This value indicates whether the video can be embedded on another website.",
    )
    publicStatsViewable: Optional[bool] = Field(
        None,
        description="This value indicates whether the extended video statistics on the video's watch page are publicly viewable.\nBy default, those statistics are viewable, and statistics like a video's `viewCount` and ratings will still be publicly visible even if this property's value is set to `false`.",
    )
    madeForKids: Optional[bool] = Field(
        None,
        description='This value indicates whether the video is designated as child-directed, and it contains the current "made for kids" status of the video.\nFor example, the status might be determined based on the value of the `selfDeclaredMadeForKids` property.',
    )
    selfDeclaredMadeForKids: Optional[bool] = Field(
        None,
        description="In a `videos.insert` or `videos.update` request, this property allows the channel owner to designate the video as being child-directed.\nIn a `videos.list` request, the property value is only returned if the channel owner authorized the API request.",
    )


class Statistics(BaseModel):
    """
    The statistics object contains statistics about the video.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    viewCount: Optional[int] = Field(None, description="The view count of the video.")
    likeCount: Optional[int] = Field(None, description="The like count of the video.")
    dislikeCount: Optional[int] = Field(
        None,
        description="The dislike count of the video.\nThe `statistics.dislikeCount` property was made private as of December 13, 2021.\nThis means that the property is included in an API response only if the API request was authenticated by the video owner.\nSee the [revision history](https://developers.google.com/youtube/v3/revision_history#release_notes_12_15_2021) for more information.",
    )
    favoriteCount: Optional[int] = Field(
        None,
        description="The favorite count of the video.\nThis property has been deprecated.\nThe deprecation is effective as of August 28, 2015.\nThe property's value is now always set to `0`.",
        examples=[0],
    )
    commentCount: Optional[int] = Field(
        None, description="The comment count of the video."
    )


class Player(BaseModel):
    """
    The player object contains information that you would use to play the video in an embedded player.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    embedHtml: Optional[str] = Field(
        None,
        description="An `<iframe>` tag that embeds a player that plays the video.\nIf the API request to retrieve the resource specifies a value for the maxHeight and/or maxWidth parameters, the size of the embedded player is scaled to satisfy the maxHeight and/or maxWidth requirements.\nIf the video's aspect ratio is unknown, the embedded player defaults to a 4:3 format.",
    )
    embedHeight: Optional[int] = Field(
        None,
        description="The height of the embedded player returned in the `player.embedHtml` property.\nThis property is only returned if the request specified a value for the maxHeight and/or maxWidth parameters and the video's aspect ratio is known.",
    )
    embedWidth: Optional[int] = Field(
        None,
        description="The width of the embedded player returned in the `player.embedHtml` property.\nThis property is only returned if the request specified a value for the maxHeight and/or maxWidth parameters and the video's aspect ratio is known.",
    )


class TopicDetails(BaseModel):
    """
    The topicDetails object encapsulates information about topics associated with the video.
    Important: See the definitions of the `topicDetails.relevantTopicIds[]` and `topicDetails.topicIds[]` properties as well as the [revision history](https://developers.google.com/youtube/v3/revision_history#november-10-2016) for more details about upcoming changes related to topic IDs.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    topicIds: Optional[List[str]] = Field(
        None,
        description="Important: This property has been deprecated as of November 10, 2016.\nThe API no longer returns values for this property, and any topics associated with a video are now returned by the `topicDetails.relevantTopicIds[]` property value.",
    )
    relevantTopicIds: Optional[List[str]] = Field(
        None,
        description="A list of topic IDs that are relevant to the video.\nImportant: This property has been deprecated as of November 10, 2016. It will be supported until November 10, 2017.",
    )
    topicCategories: Optional[List[str]] = Field(
        None,
        description="A list of Wikipedia URLs that provide a high-level description of the video's content.",
    )


class RecordingDetails(BaseModel):
    """
    The recordingDetails object encapsulates information about the location, date and address where the video was recorded.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    recordingDate: Optional[AwareDatetime] = Field(
        None,
        description="The date and time when the video was recorded. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sssZ) format.",
    )


class FileType(Enum):
    """
    The uploaded file's type as detected by YouTube's video processing engine.
    Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.
    Valid values for this property are:
    - `video` - The file is a known video file type, such as an .mp4 file.
    - `archive` - The file is an archive file, such as a .zip archive.
    - `audio` - The file is a known audio file type, such as an .mp3 file.
    - `document` - The file is a document or text file, such as a MS Word document.
    - `image` - The file is an image file, such as a .jpeg image.
    - `other` - The file is another non-video file type.
    - `project` - The file is a video project file, such as a Microsoft Windows Movie Maker project, that does not contain actual video data.
    """

    video = "video"
    archive = "archive"
    audio = "audio"
    document = "document"
    image = "image"
    other = "other"
    project = "project"


class Rotation(Enum):
    """
    The amount that YouTube needs to rotate the original source content to properly display the video.
    Valid values for this property are:
    - `none` - The video does not need to be rotated.
    - `clockwise` - The video needs to be rotated 90 degrees clockwise.
    - `counterClockwise` - The video needs to be rotated 90 degrees counter-clockwise.
    - `other` - The video needs to be rotated in some other, non-trivial way.
    - `upsideDown` - The video needs to be rotated upside down.
    """

    none = "none"
    clockwise = "clockwise"
    counterClockwise = "counterClockwise"
    other = "other"
    upsideDown = "upsideDown"


class VideoStream(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    widthPixels: Optional[int] = Field(
        None,
        description="The encoded video content's width in pixels.\nYou can calculate the video's encoding aspect ratio as `width_pixels` / `height_pixels`.",
    )
    heightPixels: Optional[int] = Field(
        None, description="The encoded video content's height in pixels."
    )
    frameRateFps: Optional[float] = Field(
        None, description="The video stream's frame rate, in frames per second."
    )
    aspectRatio: Optional[float] = Field(
        None,
        description="The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed.",
    )
    codec: Optional[str] = Field(
        None, description="The video codec that the stream uses."
    )
    bitrateBps: Optional[int] = Field(
        None, description="The video stream's bitrate, in bits per second."
    )
    rotation: Optional[Rotation] = Field(
        None,
        description="The amount that YouTube needs to rotate the original source content to properly display the video.\nValid values for this property are:\n- `none` - The video does not need to be rotated.\n- `clockwise` - The video needs to be rotated 90 degrees clockwise.\n- `counterClockwise` - The video needs to be rotated 90 degrees counter-clockwise.\n- `other` - The video needs to be rotated in some other, non-trivial way.\n- `upsideDown` - The video needs to be rotated upside down.",
        examples=["none", "clockwise", "counterClockwise", "other", "upsideDown"],
    )
    vendor: Optional[str] = Field(
        None,
        description="A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.",
    )


class AudioStream(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    channelCount: Optional[int] = Field(
        None, description="TThe number of audio channels that the stream contains."
    )
    codec: Optional[str] = Field(None, description="The codec of the audio stream.")
    bitrateBps: Optional[int] = Field(
        None, description="The bitrate of the audio stream in bits per second."
    )
    vendor: Optional[str] = Field(
        None,
        description="A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.",
    )


class FileDetails(BaseModel):
    """
    The fileDetails object encapsulates information about the video file that was uploaded to YouTube, including the file's resolution, duration, audio and video codecs, stream bitrates, and more.
    This data can only be retrieved by the video owner.
    The fileDetails object will only be returned if the `processingDetails.fileAvailability` property has a value of available.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    fileName: Optional[str] = Field(None, description="The name of the file.")
    fileSize: Optional[int] = Field(None, description="The size of the file in bytes.")
    fileType: Optional[FileType] = Field(
        None,
        description="The uploaded file's type as detected by YouTube's video processing engine.\nCurrently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.\nValid values for this property are:\n- `video` - The file is a known video file type, such as an .mp4 file.\n- `archive` - The file is an archive file, such as a .zip archive.\n- `audio` - The file is a known audio file type, such as an .mp3 file.\n- `document` - The file is a document or text file, such as a MS Word document.\n- `image` - The file is an image file, such as a .jpeg image.\n- `other` - The file is another non-video file type.\n- `project` - The file is a video project file, such as a Microsoft Windows Movie Maker project, that does not contain actual video data.",
        examples=["video", "archive", "audio", "document", "image", "other", "project"],
    )
    container: Optional[str] = Field(
        None, description="The uploaded video file's container format."
    )
    videoStreams: Optional[List[VideoStream]] = Field(
        None,
        description="A list of video streams contained in the uploaded video file.\nEach item in the list contains detailed metadata about a video stream.",
    )
    audioStreams: Optional[List[AudioStream]] = Field(
        None,
        description="A list of audio streams contained in the uploaded video file.\nEach item in the list contains detailed metadata about an audio stream.",
    )
    durationMs: Optional[int] = Field(
        None, description="The length of the uploaded video in milliseconds."
    )
    bitrateBps: Optional[int] = Field(
        None,
        description="The uploaded video file's combined (video and audio) bitrate in bits per second.",
    )
    creationTime: Optional[str] = Field(
        None,
        description="The date and time when the uploaded video file was created.\nThe value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported:\n- Date only: `YYYY-MM-DD`\n- Naive time: `YYYY-MM-DDTHH:MM:SS`\n- Time with timezone: `YYYY-MM-DDTHH:MM:SS+HH:MM`",
    )


class ProcessingStatus(Enum):
    """
    The video's processing status.
    This value indicates whether YouTube was able to process the video or if the video is still being processed.
    Valid values for this property are:
    - `succeeded` - Video has been successfully processed.
    - `failed` - Video processing has failed. See ProcessingFailureReason.
    - `processing` - Video is currently being processed. See ProcessingProgress.
    - `terminated` - Processing information is no longer available.
    """

    succeeded = "succeeded"
    failed = "failed"
    processing = "processing"
    terminated = "terminated"


class ProcessingProgress(BaseModel):
    """
    The processingProgress object contains information about the progress YouTube has made in processing the video.
    The values are really only relevant if the video's processing status is processing.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    partsTotal: Optional[int] = Field(
        None,
        description="An estimate of the total number of parts that need to be processed for the video.\nThe number may be updated with more precise estimates while YouTube processes the video.",
    )
    partsProcessed: Optional[int] = Field(
        None,
        description="The number of parts of the video that YouTube has already processed.\nYou can estimate the percentage of the video that YouTube has already processed by calculating: `100 * parts_processed / parts_total`\nNote that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video.",
    )
    timeLeftMs: Optional[int] = Field(
        None,
        description="An estimate of the amount of time, in milliseconds, that YouTube needs to finish processing the video.",
    )


class ProcessingDetails(BaseModel):
    """
    The processingDetails object encapsulates information about YouTube's progress in processing the uploaded video file.
    The properties in the object identify the current processing status and an estimate of the time remaining until YouTube finishes processing the video.
    This part also indicates whether different types of data or content, such as file details or thumbnail images, are available for the video.
    The processingProgress object is designed to be polled so that the video uploaded can track the progress that YouTube has made in processing the uploaded video file.
    This data can only be retrieved by the video owner.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    processingStatus: Optional[ProcessingStatus] = Field(
        None,
        description="The video's processing status.\nThis value indicates whether YouTube was able to process the video or if the video is still being processed.\nValid values for this property are:\n- `succeeded` - Video has been successfully processed.\n- `failed` - Video processing has failed. See ProcessingFailureReason.\n- `processing` - Video is currently being processed. See ProcessingProgress.\n- `terminated` - Processing information is no longer available.",
        examples=["succeeded", "failed", "processing", "terminated"],
    )
    processingProgress: Optional[ProcessingProgress] = Field(
        None,
        description="The processingProgress object contains information about the progress YouTube has made in processing the video.\nThe values are really only relevant if the video's processing status is processing.",
    )
    processingFailureReason: Optional[str] = Field(
        None,
        description="The reason that YouTube failed to process the video.\nThis property will only have a value if the `processingStatus` property's value is `failed`.\nValid values for this property are:\n- `other` - Some other processing component has failed.\n- `streamingFailed` - Video could not be sent to streamers.\n- `transcodeFailed` - Content transcoding has failed.\n- `uploadFailed` - File delivery has failed.",
    )
    fileDetailsAvailability: Optional[str] = Field(
        None,
        description="This value indicates whether file details are available for the uploaded video.\nYou can retrieve a video's file details by requesting the `fileDetails` part in your `videos.list()` request.",
    )
    processingIssuesAvailability: Optional[str] = Field(
        None,
        description="This value indicates whether the video processing engine has generated suggestions that might improve YouTube's ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems.\nYou can retrieve these suggestions by requesting the `suggestions` part in your `videos.list()` request.",
    )
    tagSuggestionsAvailability: Optional[str] = Field(
        None,
        description="This value indicates whether keyword (tag) suggestions are available for the video.\nTags can be added to a video's metadata to make it easier for other users to find the video.\nYou can retrieve these suggestions by requesting the `suggestions` part in your `videos.list()` request.",
    )
    editorSuggestionsAvailability: Optional[str] = Field(
        None,
        description="This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video.\nYou can retrieve these suggestions by requesting the `suggestions` part in your `videos.list()` request.",
    )
    thumbnailsAvailability: Optional[str] = Field(
        None,
        description="This value indicates whether thumbnail images have been generated for the video.",
    )


class ProcessingError(Enum):
    archiveFile = "archiveFile"
    audioFile = "audioFile"
    docFile = "docFile"
    imageFile = "imageFile"
    notAVideoFile = "notAVideoFile"
    projectFile = "projectFile"


class ProcessingWarning(Enum):
    hasEditlist = "hasEditlist"
    inconsistentResolution = "inconsistentResolution"
    problematicAudioCodec = "problematicAudioCodec"
    problematicVideoCodec = "problematicVideoCodec"
    unknownAudioCodec = "unknownAudioCodec"
    unknownContainer = "unknownContainer"
    unknownVideoCodec = "unknownVideoCodec"


class ProcessingHint(Enum):
    nonStreamableMov = "nonStreamableMov"
    sendBestQualityVideo = "sendBestQualityVideo"


class TagSuggestion(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    tag: Optional[str] = Field(
        None, description="The keyword tag suggested for the video."
    )
    categoryRestricts: Optional[List[str]] = Field(
        None,
        description="A set of video categories for which the tag is relevant.\nYou can use this information to display appropriate tag suggestions based on the video category that the video uploader associates with the video.\nBy default, tag suggestions are relevant for all categories if there are no restricts defined for the keyword.",
    )


class EditorSuggestion(Enum):
    audioQuietAudioSwap = "audioQuietAudioSwap"
    videoAutoLevels = "videoAutoLevels"
    videoCrop = "videoCrop"
    videoStabilize = "videoStabilize"


class Suggestions(BaseModel):
    """
    The suggestions object encapsulates suggestions that identify opportunities to improve the video quality or the metadata for the uploaded video.
    This data can only be retrieved by the video owner.
    The suggestions object will only be returned if the `processingDetails.tagSuggestionsAvailability` property or the `processingDetails.editorSuggestionsAvailability` property has a value of `available`.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    processingErrors: Optional[List[ProcessingError]] = Field(
        None,
        description="A list of errors that will prevent YouTube from successfully processing the uploaded video.\nThese errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed.\nValid values for this property are:\n- `archiveFile` - An archive file (e.g., a ZIP archive).\n- `audioFile` - File contains audio only (e.g., an MP3 file).\n- `docFile` - Document or text file (e.g., MS Word document).\n- `imageFile` - Image file (e.g., a JPEG image).\n- `notAVideoFile` - Other non-video file.\n- `projectFile` - Movie project file (e.g., Microsoft Windows Movie Maker project).",
    )
    processingWarnings: Optional[List[ProcessingWarning]] = Field(
        None,
        description="A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding.\nThese warnings are generated before YouTube actually processes the uploaded video file.\nIn addition, they identify issues that do not necessarily indicate that video processing will fail but that still might cause problems such as sync issues, video artifacts, or a missing audio track.\nValid values for this property are:\n- `hasEditlist` - Edit lists are not currently supported.\n- `inconsistentResolution` - Conflicting container and stream resolutions.\n- `problematicAudioCodec` - Audio codec that is known to cause problems was used.\n- `problematicVideoCodec` - Video codec that is known to cause problems was used.\n- `unknownAudioCodec` - Unrecognized audio codec, transcoding is likely to fail.\n- `unknownContainer` - Unrecognized file format, transcoding is likely to fail.\n- `unknownVideoCodec` - Unrecognized video codec, transcoding is likely to fail.",
    )
    processingHints: Optional[List[ProcessingHint]] = Field(
        None,
        description="A list of suggestions that may improve YouTube's ability to process the video.\nValid values for this property are:\n- `nonStreamableMov` - The MP4 file is not streamable, this will slow down the processing.\n- `sendBestQualityVideo` - Probably a better quality version of the video exists.",
    )
    tagSuggestions: Optional[List[TagSuggestion]] = Field(
        None,
        description="A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube.",
    )
    editorSuggestions: Optional[List[EditorSuggestion]] = Field(
        None,
        description="A list of video editing operations that might improve the video quality or playback experience of the uploaded video.\nValid values for this property are:\n- `audioQuietAudioSwap` - The audio track appears silent and could be swapped with a better quality one.\n- `videoAutoLevels` - Picture brightness levels seem off and could be corrected.\n- `videoCrop` - Margins (mattes) detected around the picture could be cropped.\n- `videoStabilize` - The video appears shaky and could be stabilized.",
    )


class LiveStreamingDetails(BaseModel):
    """
    The liveStreamingDetails object contains metadata about a live video broadcast.
    The object will only be present in a `video` resource if the video is an upcoming, live, or completed live broadcast.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    actualStartTime: Optional[AwareDatetime] = Field(
        None,
        description="The time that the broadcast actually started.\nThe value is specified in ISO 8601 format.\nThis value will not be available until the broadcast begins.",
    )
    actualEndTime: Optional[AwareDatetime] = Field(
        None,
        description="The time that the broadcast actually ended.\nThe value is specified in ISO 8601 format.\nThis value will not be available until the broadcast is over.",
    )
    scheduledStartTime: Optional[AwareDatetime] = Field(
        None,
        description="The time that the broadcast is scheduled to begin.\nThe value is specified in ISO 8601 format.",
    )
    scheduledEndTime: Optional[AwareDatetime] = Field(
        None,
        description="The time that the broadcast is scheduled to end.\nThe value is specified in ISO 8601 format.\nIf the value is empty or the property is not present, then the broadcast is scheduled to continue indefinitely.",
    )
    concurrentViewers: Optional[int] = Field(
        None,
        description="The number of viewers currently watching the broadcast.\nThe property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the `viewCount` for the video.\nNote that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends.\nSo, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.",
    )
    activeLiveChatId: Optional[str] = Field(
        None,
        description="The ID of the currently active live chat attached to this video.\nThis field is filled only if the video is a currently live broadcast that has live chat.\nOnce the broadcast transitions to complete this field will be removed and the live chat closed down.\nFor persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page.",
    )


class Localization1(BaseModel):
    """
    The language of the localized text associated with the key value. The value is a string that contains a BCP-47 language code.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    title: Optional[str] = Field(None, description="The localized video title.")
    description: Optional[str] = Field(
        None, description="The localized video description."
    )


class Localization(RootModel[Optional[Dict[str, Localization1]]]):
    """
    The localizations object contains translations of the video's metadata.
    """

    root: Optional[Dict[str, Localization1]] = Field(
        None,
        description="The language of the localized text associated with the key value. The value is a string that contains a BCP-47 language code.",
    )


class TrackKind(Enum):
    """
    The caption track's type.
    Valid values for this property are
      - `standard` - A regular caption track. This is the default value.
      - `ASR` - A caption track generated using automatic speech recognition.
      - `forced` - A caption track that plays when no other track is selected in the player. For example, a video that shows aliens speaking in an alien language might have a forced caption track to only show subtitles for the alien language.
    """

    standard = "standard"
    ASR = "ASR"
    forced = "forced"


class AudioTrackType(Enum):
    """
    The type of audio track associated with the caption track.
    Valid values for this property are
    - `unknown` - This is the default value.
    - `commentary` - The caption track corresponds to an alternate audio track that includes commentary, such as directory commentary.
    - `descriptive` - The caption track corresponds to an alternate audio track that includes additional descriptive audio.
    - `primary` - The caption track corresponds to the primary audio track for the video, which is the audio track normally associated with the video.
    """

    unknown = "unknown"
    commentary = "commentary"
    descriptive = "descriptive"
    primary = "primary"


class Status1(Enum):
    """
    The caption track's status.
    Valid values for this property are
    - `failed`
    - `serving`
    - `syncing`
    """

    failed = "failed"
    serving = "serving"
    syncing = "syncing"


class FailureReason1(Enum):
    """
    The reason that YouTube failed to process the caption track.
    This property is only present if the state property's value is failed.
    Valid values for this property are
    - `processingFailed` - YouTube failed to process the uploaded caption track.
    - `unknownFormat` - The caption track's format was not recognized.
    - `unsupportedFormat` - The caption track's format is not supported.
    """

    processingFailed = "processingFailed"
    unknownFormat = "unknownFormat"
    unsupportedFormat = "unsupportedFormat"


class Snippet1(BaseModel):
    """
    The snippet object contains basic details about the caption.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    videoId: Optional[str] = Field(
        None,
        description="The ID that YouTube uses to uniquely identify the video associated with the caption track.",
        examples=["videoId"],
    )
    lastUpdated: Optional[AwareDatetime] = Field(
        None,
        description="The date and time when the caption track was last updated. The value is specified in ISO 8601 format.",
        examples=["2020-01-23T12:34:56Z"],
    )
    trackKind: Optional[TrackKind] = Field(
        None,
        description="The caption track's type.\nValid values for this property are\n  - `standard` - A regular caption track. This is the default value.\n  - `ASR` - A caption track generated using automatic speech recognition.\n  - `forced` - A caption track that plays when no other track is selected in the player. For example, a video that shows aliens speaking in an alien language might have a forced caption track to only show subtitles for the alien language.",
        examples=["standard", "ASR", "forced"],
    )
    language: Optional[str] = Field(
        None,
        description="The language of the caption track.\nThe property value is a BCP-47 language tag.",
        examples=["ja-JP"],
    )
    name: Optional[str] = Field(
        None,
        description="The name of the caption track.\nThe name is intended to be visible to the user as an option during playback.",
        examples=["name"],
    )
    audioTrackType: Optional[AudioTrackType] = Field(
        None,
        description="The type of audio track associated with the caption track.\nValid values for this property are\n- `unknown` - This is the default value.\n- `commentary` - The caption track corresponds to an alternate audio track that includes commentary, such as directory commentary.\n- `descriptive` - The caption track corresponds to an alternate audio track that includes additional descriptive audio.\n- `primary` - The caption track corresponds to the primary audio track for the video, which is the audio track normally associated with the video.",
        examples=["unknown", "commentary", "descriptive", "primary"],
    )
    isCC: Optional[bool] = Field(
        None,
        description="Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is `false`.",
        examples=[False],
    )
    isLarge: Optional[bool] = Field(
        None,
        description="Indicates whether the caption track uses large text for the vision-impaired. The default value is `false`.",
        examples=[False],
    )
    isEasyReader: Optional[bool] = Field(
        None,
        description='Indicates whether caption track is formatted for "easy reader," meaning it is at a third-grade level for language learners. The default value is `false`.',
        examples=[False],
    )
    isDraft: Optional[bool] = Field(
        None,
        description="Indicates whether the caption track is a draft. If the value is `true`, then the track is not publicly visible. The default value is `false`.",
        examples=[False],
    )
    isAutoSynced: Optional[bool] = Field(
        None,
        description="Indicates whether YouTube synchronized the caption track to the audio track in the video.\nThe value will be `true` if a sync was explicitly requested when the caption track was uploaded.\nFor example, when calling the `captions.insert` or `captions.update` methods, you can set the sync parameter to `true` to instruct YouTube to sync the uploaded track to the video.\nIf the value is `false`, YouTube uses the time codes in the uploaded caption track to determine when to display captions.",
        examples=[True],
    )
    status: Optional[Status1] = Field(
        None,
        description="The caption track's status.\nValid values for this property are\n- `failed`\n- `serving`\n- `syncing`",
        examples=["failed", "serving", "syncing"],
    )
    failureReason: Optional[FailureReason1] = Field(
        None,
        description="The reason that YouTube failed to process the caption track.\nThis property is only present if the state property's value is failed.\nValid values for this property are\n- `processingFailed` - YouTube failed to process the uploaded caption track.\n- `unknownFormat` - The caption track's format was not recognized.\n- `unsupportedFormat` - The caption track's format is not supported.",
        examples=["processingFailed", "unknownFormat", "unsupportedFormat"],
    )


class CaptionModel(BaseModel):
    """
    The caption resource represents a YouTube caption track.
    A caption track is associated with a single YouTube video.
    See. [Captions](https://developers.google.com/youtube/v3/docs/captions#resource)
    """

    model_config = ConfigDict(
        extra="allow",
    )
    kind: Optional[str] = Field(
        None,
        description="Identifies the API resource's type. The value will be `youtube#caption`.",
        examples=["youtube#caption"],
    )
    etag: Optional[str] = Field(
        None, description="The Etag of this resource.", examples=["etag"]
    )
    id: Optional[str] = Field(
        None,
        description="The ID that YouTube uses to uniquely identify the caption track.",
        examples=["id"],
    )
    snippet: Optional[Snippet1] = Field(
        None, description="The snippet object contains basic details about the caption."
    )


class VideoCategory(BaseModel):
    """
    A videoCategory resource identifies a category that has been or could be associated with uploaded videos.
    See. [VideoCategories](https://developers.google.com/youtube/v3/docs/videoCategories#resource)
    """

    model_config = ConfigDict(
        extra="allow",
    )
    kind: Optional[str] = Field(
        None,
        description="Identifies the API resource's type. The value will be `youtube#videoCategory`.",
        examples=["youtube#videoCategory"],
    )
    etag: Optional[str] = Field(None, description="The Etag of this resource.")
    id: Optional[str] = Field(
        None,
        description="The ID that YouTube uses to uniquely identify the video category.",
    )
    snippet: Optional[VideoCategorySnippet] = None


class Snippet(BaseModel):
    """
    The snippet object contains basic details about the video, such as its title, description, and category.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    publishedAt: Optional[AwareDatetime] = Field(
        None,
        description="The date and time that the video was published.\nNote that this time might be different than the time that the video was uploaded.\nFor example, if a video is uploaded as a private video and then made public at a later time, this property will specify the time that the video was made public.\nThere are a couple of special cases:\n- If a video is uploaded as a private video and the video metadata is retrieved by the channel owner, then the property value specifies the date and time that the video was uploaded.\n- If a video is uploaded as an unlisted video, the property value also specifies the date and time that the video was uploaded. In this case, anyone who knows the video's unique video ID can retrieve the video metadata.\nThe value is specified in ISO 8601 format.",
    )
    channelId: Optional[str] = Field(
        None,
        description="The ID that YouTube uses to uniquely identify the channel that the video was uploaded to.",
    )
    title: Optional[str] = Field(
        None,
        description="The video's title.\nThe property value has a maximum length of 100 characters and may contain all valid UTF-8 characters except < and >.\nYou must set a value for this property if you call the videos.update method and are updating the snippet part of a video resource.",
    )
    description: Optional[str] = Field(
        None,
        description="The video's description. The property value has a maximum length of 5000 bytes and may contain all valid UTF-8 characters except < and >.",
    )
    thumbnails: Optional[Dict[str, Thumbnail]] = None
    channelTitle: Optional[str] = Field(
        None, description="The title of the channel that the video belongs to."
    )
    tags: Optional[List[str]] = Field(
        None,
        description="A list of keyword tags associated with the video.\nTags may contain spaces.\nThe property value has a maximum length of 500 characters.\nNote the following rules regarding the way the character limit is calculated:\n- The property value is a list, and commas between items in the list count toward the limit.\n- If a tag contains a space, the API server handles the tag value as though it were wrapped in quotation marks, and the quotation marks count toward the character limit.",
    )
    categoryId: Optional[str] = Field(
        None,
        description="The YouTube video category associated with the video. You must set a value for this property if you call the `videos.update` method and are updating the snippet part of a video resource.",
    )
    liveBroadcastContent: Optional[LiveBroadcastContent] = Field(
        None,
        description='Indicates if the video is an upcoming/active live broadcast. Or it\'s "none" if the video is not an upcoming/active live broadcast.\nValid values for this property are:\n- `live`\n- `none`\n- `upcoming`',
    )
    defaultLanguage: Optional[str] = Field(
        None,
        description="The language of the text in the video resource's `snippet.title` and `snippet.description` properties.",
    )
    localized: Optional[Localized] = None
    defaultAudioLanguage: Optional[str] = Field(
        None,
        description="The `default_audio_language` property specifies the language spoken in the video's default audio track.",
    )


class ContentDetails(BaseModel):
    """
    The contentDetails object contains information about the video content, including the length of the video and an indication of whether captions are available for the video.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    duration: Optional[str] = Field(
        None,
        description="The length of the video.\nThe property value is an ISO 8601 duration.\nFor example, for a video that is at least one minute long and less than one hour long, the duration is in the format `PT#M#S`, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively.\nThe # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video.\nFor example, a value of `PT15M33S` indicates that the video is 15 minutes and 33 seconds long.\nIf the video is at least one hour long, the duration is in the format PT#H#M#S, in which the # preceding the letter H specifies the length of the video in hours and all of the other details are the same as described above.\nIf the video is at least one day long, the letters P and T are separated, and the value's format is P#DT#H#M#S. Please refer to the ISO 8601 specification for complete details.",
    )
    dimension: Optional[str] = Field(
        None, description="Indicates whether the video is available in 3D or in 2D."
    )
    definition: Optional[Definition] = Field(
        None,
        description="Indicates whether the video is available in high definition (HD) or only in standard definition.\nValid values for this property are:\n- `hd`\n- `sd`",
        examples=["hd", "sd"],
    )
    caption: Optional[Caption] = Field(
        None,
        description="Indicates whether captions are available for the video.\nValid values for this property are:\n- `false`\n- `true`",
        examples=[False, True],
    )
    licensedContent: Optional[bool] = Field(
        None,
        description="Indicates whether the video represents licensed content, which means that the content was uploaded to a channel linked to a YouTube content partner and then claimed by that partner.",
    )
    regionRestriction: Optional[RegionRestriction] = Field(
        None,
        description="The `regionRestriction` object contains information about the countries where a video is (or is not) viewable.\nThe object will contain either the `contentDetails.regionRestriction.allowed` property or the `contentDetails.regionRestriction.blocked` property.",
    )
    contentRating: Optional[ContentRating] = None
    projection: Optional[str] = Field(
        None,
        description="Specifies the projection format of the video.\nValid values for this property are:\n- `360`\n- `rectangular`",
    )
    hasCustomThumbnail: Optional[bool] = Field(
        None,
        description="Indicates whether the video uploader has provided a custom thumbnail image for the video.\nThis property is only visible to the video uploader.",
    )


class CaptionList(BaseModel):
    """
    List of caption tracks associated with the specified video.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    kind: Optional[str] = Field(
        None,
        description="Identifies the API resource's type. The value will be `youtube#captionListResponse`.",
        examples=["youtube#captionListResponse"],
    )
    etag: Optional[str] = Field(
        None, description="The Etag of this resource.", examples=["etag"]
    )
    items: Optional[List[CaptionModel]] = Field(
        None, description="A list of captions that match the request criteria."
    )


class VideoCategoryList(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    kind: str = Field(
        ...,
        description="Identifies the API resource's type. The value will be `youtube#videoCategoryListResponse`.",
        examples=["youtube#videoCategoryListResponse"],
    )
    etag: str = Field(..., description="The Etag of this resource.")
    nextPageToken: Optional[str] = Field(
        None,
        description="The token that can be used as the value of the `pageToken` parameter to retrieve the next page in the result set.",
    )
    prevPageToken: Optional[str] = Field(
        None,
        description="The token that can be used as the value of the `pageToken` parameter to retrieve the previous page in the result set.",
    )
    pageInfo: Optional[PageInfo] = None
    items: List[VideoCategory] = Field(
        ...,
        description="A list of video categories that can be associated with YouTube videos.",
    )


class Video(BaseModel):
    """
    A video resource represents a YouTube video.
    See. [Videos](https://developers.google.com/youtube/v3/docs/videos#resource)
    """

    model_config = ConfigDict(
        extra="allow",
    )
    kind: Optional[str] = Field(
        None,
        description="Identifies the API resource's type. The value will be `youtube#video`.",
        examples=["youtube#video"],
    )
    etag: Optional[str] = Field(None, description="The Etag of this resource.")
    id: Optional[str] = Field(
        None, description="The ID that YouTube uses to uniquely identify the video."
    )
    snippet: Optional[Snippet] = None
    contentDetails: Optional[ContentDetails] = None
    status: Optional[Status] = None
    statistics: Optional[Statistics] = None
    player: Optional[Player] = None
    topicDetails: Optional[TopicDetails] = None
    recordingDetails: Optional[RecordingDetails] = None
    fileDetails: Optional[FileDetails] = None
    processingDetails: Optional[ProcessingDetails] = None
    suggestions: Optional[Suggestions] = None
    liveStreamingDetails: Optional[LiveStreamingDetails] = None
    localizations: Optional[Dict[str, Localization]] = None


class VideoList(BaseModel):
    """
    The response from the YouTube API that contains the list of videos.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    kind: Optional[str] = Field(
        None,
        description="Identifies the API resource's type. The value will be `youtube#videoListResponse`.",
        examples=["youtube#videoListResponse"],
    )
    etag: Optional[str] = Field(None, description="The Etag of this resource.")
    nextPageToken: Optional[str] = Field(
        None,
        description="The token that can be used as the value of the `pageToken` parameter to retrieve the next page in the result set.",
    )
    prevPageToken: Optional[str] = Field(
        None,
        description="The token that can be used as the value of the `pageToken` parameter to retrieve the previous page in the result set.",
    )
    pageInfo: Optional[PageInfo] = None
    items: Optional[List[Video]] = Field(
        None, description="A list of videos that match the request criteria."
    )
