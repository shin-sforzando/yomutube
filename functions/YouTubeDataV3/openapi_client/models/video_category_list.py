# coding: utf-8
"""
    YouTube Data API v3

    See. [YouTube Data API v3](https://developers.google.com/youtube/v3)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import ClassVar
from typing import Dict
from typing import List
from typing import Optional

from openapi_client.models.page_info import PageInfo
from openapi_client.models.video_category import VideoCategory
from pydantic import BaseModel
from pydantic import Field
from pydantic import StrictStr

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class VideoCategoryList(BaseModel):
    """
    VideoCategoryList
    """  # noqa: E501

    kind: Optional[StrictStr] = Field(
        default=None,
        description="Identifies the API resource's type. The value will be `youtube#videoCategoryListResponse`.",
    )
    etag: Optional[StrictStr] = Field(
        default=None, description="The Etag of this resource."
    )
    next_page_token: Optional[StrictStr] = Field(
        default=None,
        description="The token that can be used as the value of the `pageToken` parameter to retrieve the next page in the result set.",
        alias="nextPageToken",
    )
    prev_page_token: Optional[StrictStr] = Field(
        default=None,
        description="The token that can be used as the value of the `pageToken` parameter to retrieve the previous page in the result set.",
        alias="prevPageToken",
    )
    page_info: Optional[PageInfo] = Field(default=None, alias="pageInfo")
    items: Optional[List[VideoCategory]] = None
    __properties: ClassVar[List[str]] = [
        "kind",
        "etag",
        "nextPageToken",
        "prevPageToken",
        "pageInfo",
        "items",
    ]

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VideoCategoryList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of page_info
        if self.page_info:
            _dict["pageInfo"] = self.page_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict["items"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VideoCategoryList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "kind": obj.get("kind"),
                "etag": obj.get("etag"),
                "nextPageToken": obj.get("nextPageToken"),
                "prevPageToken": obj.get("prevPageToken"),
                "pageInfo": PageInfo.from_dict(obj.get("pageInfo"))
                if obj.get("pageInfo") is not None
                else None,
                "items": [VideoCategory.from_dict(_item) for _item in obj.get("items")]
                if obj.get("items") is not None
                else None,
            }
        )
        return _obj
