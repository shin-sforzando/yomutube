# coding: utf-8
"""
    YouTube Data API v3

    See. [YouTube Data API v3](https://developers.google.com/youtube/v3)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import ClassVar
from typing import Dict
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import Field
from pydantic import StrictInt

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class ProcessingDetailsProcessingProgress(BaseModel):
    """
    The processingProgress object contains information about the progress YouTube has made in processing the video. The values are really only relevant if the video's processing status is processing.
    """  # noqa: E501

    parts_total: Optional[StrictInt] = Field(
        default=None,
        description="An estimate of the total number of parts that need to be processed for the video. The number may be updated with more precise estimates while YouTube processes the video.",
        alias="partsTotal",
    )
    parts_processed: Optional[StrictInt] = Field(
        default=None,
        description="The number of parts of the video that YouTube has already processed. You can estimate the percentage of the video that YouTube has already processed by calculating: `100 * parts_processed / parts_total` Note that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video.",
        alias="partsProcessed",
    )
    time_left_ms: Optional[StrictInt] = Field(
        default=None,
        description="An estimate of the amount of time, in milliseconds, that YouTube needs to finish processing the video.",
        alias="timeLeftMs",
    )
    __properties: ClassVar[List[str]] = ["partsTotal", "partsProcessed", "timeLeftMs"]

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProcessingDetailsProcessingProgress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProcessingDetailsProcessingProgress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "partsTotal": obj.get("partsTotal"),
                "partsProcessed": obj.get("partsProcessed"),
                "timeLeftMs": obj.get("timeLeftMs"),
            }
        )
        return _obj
